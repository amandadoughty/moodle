<?php
/**
 * Atto text editor integration
 * This class initializes the LTI authentication information
 *
 * @package    atto_echo360attoplugin
 * @copyright  COPYRIGHTINFO
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace Echo360;

use \Exception as Exception;
use \DateTime as DateTime;

const LTI_ROLE_REQUEST_ADMINISTRATOR = 'urn:lti:sysrole:ims/lis/Administrator';
const LTI_ROLE_REQUEST_INSTRUCTOR = 'urn:lti:role:ims/lis/Instructor';
const LTI_ROLE_REQUEST_LEARNER = 'urn:lti:role:ims/lis/Learner';

const LTI_ADMIN = 'admin';
const LTI_ADMINISTRATOR = 'administrator';
const LTI_FACULTY = 'faculty';
const LIS_SYSTEM_ADMIN = 'urn:lti:sysrole:ims/lis/administrator';
const LIS_INSTITUTION_ADMIN = 'urn:lti:instrole:ims/lis/administrator';

const LTI_INSTRUCTOR = 'instructor';
const LTI_TEACHER = 'teacher';
const LTI_EDITING_TEACHER = 'editingteacher';
const LTI_NON_EDITING_TEACHER = 'non-editing teacher';
const LTI_COURSE_CREATOR = 'coursecreator';
const LTI_MANAGER = 'manager';
const LTI_MENTOR = 'urn:lti:role:ims/lis/mentor';
const LTI_CONTENT_DEVELOPER = 'urn:lti:role:ims/lis/contentdeveloper';
const LTI_TEACHING_ASSISTANT = 'urn:lti:role:ims/lis/teachingassistant';
const LTI_GRADER = "urn:lti:role:ims/lis/teachingassistant/grader";

const LTI_STUDENT= 'student';

const LTI_ADMIN_ROLES = array(
  LTI_ADMIN,
  LTI_ADMINISTRATOR,
  LIS_SYSTEM_ADMIN,
  LIS_INSTITUTION_ADMIN
);

const LTI_INSTRUCTOR_ROLES = array(
  LTI_FACULTY,
  LTI_INSTRUCTOR,
  LTI_TEACHER,
  LTI_EDITING_TEACHER,
  LTI_NON_EDITING_TEACHER,
  LTI_MANAGER,
  LTI_MENTOR,
  LTI_CONTENT_DEVELOPER,
  LTI_TEACHING_ASSISTANT,
  LTI_GRADER,
  LTI_COURSE_CREATOR
);

const LTI_STUDENT_ROLES = array(
  LTI_STUDENT
);

class LtiConfiguration {

  private $launch_url;
  private $consumer_key;
  private $secret_key;
  private $roles_array;
  private $context;

  /**
   * The lti_configuration constructor.
   * @param $context array - the course context, https://docs.moodle.org/34/en/Context
   * @param $plugin_name
   * @throws \Exception
   */
  function __construct($context, $plugin_name) {
    global $USER, $CFG;
    if (is_file($CFG->dirroot . '/mod/lti/locallib.php')) {
      require_once($CFG->dirroot . '/mod/lti/locallib.php');
    } else {
      error_log("Unable to require: " . $CFG->dirroot . '/mod/lti/locallib.php', 0);
    }

    if (empty($context)) {
      throw new Exception('[' . $plugin_name . '] No context provided to constructor');
    }

    // LMS configuration settings generated by Echo360 admin configurations page
    $this->launch_url = self::get_plugin_config('hosturl', $plugin_name);
    $this->consumer_key = self::get_plugin_config('consumerkey', $plugin_name);
    $this->secret_key = self::get_plugin_config('sharedsecret', $plugin_name);

    $this->roles_array = self::get_role_names($context, $USER, $plugin_name);
    $this->context = $context;
  }

  /**
   * Use predefined get_config method to retrieve value set by admin user;
   * performs validation and returns the value
   *
   * @param $key String the key we want to retrieve
   * @param $plugin_name string the name of the plugin
   * @return mixed
   * @throws \Exception
   */
  public static function get_plugin_config($key, $plugin_name) {
    $value = get_config($plugin_name, $key);
    if (empty($value)) {
      throw new Exception('[' . $plugin_name . '] Configuration Missing: ' . (string) $key);
    }
    return $value;
  }

  /**
   * @param $context
   * @param $user
   * @param $plugin_name
   * @return mixed
   * @throws Exception
   * @internal param $context
   */
  public static function get_role_names($context, $user, $plugin_name) {
    global $COURSE;
    $role_names = array();
    //  Check IMS Roles
    try {
      $ims_roles = explode(",", lti_get_ims_role($user, '', $COURSE->id, ''));
      foreach ($ims_roles as $ims_role) {
        array_push($role_names, $ims_role);
      }
    } catch (Exception $e) {
      error_log($e->getMessage(), 0);
    }
    //  Check Context Roles
    $roles = get_user_roles($context, $user->id);
    foreach ($roles as $role) {
      array_push($role_names, role_get_name($role, $context));
    }
    //  Check Admins
    $admins = get_admins();
    foreach ($admins as $admin) {
      if ($user->id == $admin->id) {
        array_push($role_names, 'Admin');
        break;
      }
    }
    if (empty($role_names)) {
      throw new Exception('[' . $plugin_name . '] No user roles found for user: ' . $user->id . '.');
    }
    return $role_names;
  }

  /**
   * In OAuth, request parameters must be sorted by name
   *
   * @param $assoc_array
   * @return array $launch_params The parameters sorted alphabetically
   */
  public static function sort_array_alphabetically(array $assoc_array) {
    $params = array();
    $keys = array_keys($assoc_array);
    sort($keys);
    foreach ($keys as $key) {
      $urlEncodedParam = rawurlencode($assoc_array[$key]);
      array_push($params, $key . '=' . $urlEncodedParam);
    }
    return $params;
  }

  /**
   * Simple helper to convert a PHP object to a JSON object
   *
   * @param $object object
   * @return string $json
   */
  public static function object_to_json($object) {
    $array = (array) $object;
    return json_encode($array);
  }

  /**
   * @return array $roles_array the roles the user has in Moodle for a given context
   */
  public function get_roles_array() {
    return $this->roles_array;
  }

  /**
   * Generates the oAuth 1.0 signature
   *
   * @param $launch_url
   * @param $oauth_params
   * @param $secret
   * @return string $signature The result of the HMAC hashing
   */
  function get_oauth_signature($launch_url, $oauth_params, $secret) {
    $oauth_params = self::sort_array_alphabetically($oauth_params);
    $base_string = 'POST&' . urlencode($launch_url) . '&' . rawurlencode(implode('&', $oauth_params));
    $secret = urlencode($secret) . '&';
    $signature = base64_encode(hash_hmac('sha1', $base_string, $secret, true));

    return $signature;
  }



  /**
   * Checks if embed button should be displayed for user
   *
   * @param $roles
   * @return bool
   */
  public function sanitize_roles($roles) {
    $roles = array_map('strtolower', $roles);
    $highest_role = LTI_ROLE_REQUEST_LEARNER;
    foreach ($roles as $role) {
      if (in_array($role, LTI_ADMIN_ROLES) || strpos($role, 'administrator') !== false) {
        $highest_role = LTI_ROLE_REQUEST_ADMINISTRATOR;
        break;
      } elseif (in_array($role, LTI_INSTRUCTOR_ROLES) || strpos($role, 'instructor') !== false) {
        $highest_role = LTI_ROLE_REQUEST_INSTRUCTOR;
      }
    }
    return $highest_role;
  }

  /**
   * Fetch LTI info
   *
   * @param  $custom_params An optional array of key => value parameters that will be added to
   *                        the LTI request.
   * @return array
   */
  public function generate_lti_configuration($custom_params = array()) {
    global $CFG, $COURSE, $USER, $PAGE;

    // Default to embed for users.
    $content_intended_use = "embed";

    // List of allowed custom parameters
    $allowed_custom_params = array(
      'launch_presentation_document_target',
      'launch_presentation_width',
      'launch_presentation_height'
    );

    // Enable homework linking only for students submitting assignments.
    if ((strpos($PAGE->pagetype, 'mod-assign-') === 0) &&
        has_capability('mod/assign:submit', $this->context, $USER->id) &&
        !has_capability('mod/assign:grade', $this->context, $USER->id)) {
      $content_intended_use = "homework";
    }

    // configure the LTI form data
    $now = new DateTime();
    $launch_data =  array(
      'lti_version' => 'LTI-1p0',
      'lti_message_type' => 'basic-lti-launch-request',
      'resource_link_id' => $this->context->id,
      'ext_content_intended_use' => $content_intended_use,
      'tool_consumer_info_product_family_code' => 'moodle',
      'tool_consumer_info_version' => $CFG->version,
      'selection_directive' => 'embed_content',
      'launch_url' => $this->launch_url,
      'context_id' => $COURSE->id,
      'context_title' => $COURSE->fullname,
      'context_label' => $COURSE->shortname,
      'user_id' => $USER->id,
      'lis_person_name_full' => $USER->firstname . ' ' . $USER->lastname,
      'lis_person_name_family' => $USER->lastname,
      'lis_person_name_given' => $USER->firstname,
      'lis_person_contact_email_primary' => $USER->email,
      'roles' => $this->sanitize_roles($this->roles_array),
      'oauth_callback' => 'about:blank',
      'oauth_consumer_key' => $this->consumer_key,
      'oauth_version' => '1.0',
      'oauth_nonce' => uniqid('', true),
      'oauth_timestamp' => $now->getTimestamp(),
      'oauth_signature_method' => 'HMAC-SHA1'
    );

    foreach ($custom_params as $key => $value) {
      // Only add allowed custom parameters
      if (in_array($key, $allowed_custom_params)) {
        $launch_data[$key] = $value;
      }
    }

    // sign the oauth request
    $launch_data['oauth_signature'] = $this->get_oauth_signature($this->launch_url, $launch_data, $this->secret_key);

    return $launch_data;
  }

}

?>
